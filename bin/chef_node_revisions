#!/usr/bin/env ruby
require 'rubygems'
require 'rest_client'
require 'choice'
require 'pp'
require 'json/pure'

CHEF_DB_URL = 'http://localhost:5984/chef'

def main
  Choice.options do
    header ''
    header 'Available options:'

    option :help do
      long '--help'
      short '-h'
      desc 'Show this message'
      action do 
        Choice.help
        exit
      end
    end

    option :name do 
      default '.*'
      long '--name=REGEXP'
      short '-n'
      desc 'Match only the nodes with an FQDN matching this value'
    end
    
    option :revision do 
      long '--revisions=REV'
      short '-r'
      desc 'Match only the nodes with an FQDN matching this value'
    end

    option :no_ifaces do 
      long '--no-ifaces'
      desc 'Do not print network interfaces'
    end
  end

  output = RestClient.get('http://localhost:5984/chef/_all_docs') || []
  nodes = JSON::Pure::Parser.new(output, :create_additions => false).parse['rows']
  match = nil
  nodes.each do |n|
    match = n if n['id'] =~ /node_.*#{Choice.choices[:name]}.*/
  end

  json = RestClient.get "http://localhost:5984/chef/#{match['id']}?revs_info=true"
  #{Choice.choices[:revision]}"
  node = JSON::Pure::Parser.new(json, :create_additions => false).parse
  puts "[ #{node['name']} ]"
  if Choice.choices[:revision]
    begin
      node = parse_json "http://localhost:5984/chef/#{match['id']}?rev=#{Choice.choices[:revision]}"
      pp node
    rescue RestClient::RequestFailed
      $stderr.puts "Revision '#{Choice.choices[:revision]}' not found for node #{match['id']}"
    end
  else
    puts "REVISION".ljust(30) + "DATE"
    node['_revs_info'].each do |ri|
      if ri['status'] == 'available'
        print "#{ri['rev']}".ljust(20)
        node = parse_json "http://localhost:5984/chef/#{match['id']}?rev=#{ri['rev']}"
        puts "  #{Time.at(node['attributes']['ohai_time']).strftime('%Y/%m/%d-%H:%M:%S')}"
      end
    end
  end

end

def parse_json(url)
  json = RestClient.get url
  JSON::Pure::Parser.new(json, :create_additions => false).parse
end

main
